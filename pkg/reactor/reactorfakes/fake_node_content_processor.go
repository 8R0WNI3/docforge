// SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package reactorfakes

import (
	"bytes"
	"context"
	"sync"

	"github.com/gardener/docforge/pkg/manifest"
	"github.com/gardener/docforge/pkg/reactor"
)

type FakeNodeContentProcessor struct {
	PrepareStub        func([]*manifest.Node)
	prepareMutex       sync.RWMutex
	prepareArgsForCall []struct {
		arg1 []*manifest.Node
	}
	ProcessStub        func(context.Context, *bytes.Buffer, reactor.Reader, *manifest.Node) error
	processMutex       sync.RWMutex
	processArgsForCall []struct {
		arg1 context.Context
		arg2 *bytes.Buffer
		arg3 reactor.Reader
		arg4 *manifest.Node
	}
	processReturns struct {
		result1 error
	}
	processReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeContentProcessor) Prepare(arg1 []*manifest.Node) {
	var arg1Copy []*manifest.Node
	if arg1 != nil {
		arg1Copy = make([]*manifest.Node, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.prepareMutex.Lock()
	fake.prepareArgsForCall = append(fake.prepareArgsForCall, struct {
		arg1 []*manifest.Node
	}{arg1Copy})
	stub := fake.PrepareStub
	fake.recordInvocation("Prepare", []interface{}{arg1Copy})
	fake.prepareMutex.Unlock()
	if stub != nil {
		fake.PrepareStub(arg1)
	}
}

func (fake *FakeNodeContentProcessor) PrepareCallCount() int {
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	return len(fake.prepareArgsForCall)
}

func (fake *FakeNodeContentProcessor) PrepareCalls(stub func([]*manifest.Node)) {
	fake.prepareMutex.Lock()
	defer fake.prepareMutex.Unlock()
	fake.PrepareStub = stub
}

func (fake *FakeNodeContentProcessor) PrepareArgsForCall(i int) []*manifest.Node {
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	argsForCall := fake.prepareArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeContentProcessor) Process(arg1 context.Context, arg2 *bytes.Buffer, arg3 reactor.Reader, arg4 *manifest.Node) error {
	fake.processMutex.Lock()
	ret, specificReturn := fake.processReturnsOnCall[len(fake.processArgsForCall)]
	fake.processArgsForCall = append(fake.processArgsForCall, struct {
		arg1 context.Context
		arg2 *bytes.Buffer
		arg3 reactor.Reader
		arg4 *manifest.Node
	}{arg1, arg2, arg3, arg4})
	stub := fake.ProcessStub
	fakeReturns := fake.processReturns
	fake.recordInvocation("Process", []interface{}{arg1, arg2, arg3, arg4})
	fake.processMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNodeContentProcessor) ProcessCallCount() int {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return len(fake.processArgsForCall)
}

func (fake *FakeNodeContentProcessor) ProcessCalls(stub func(context.Context, *bytes.Buffer, reactor.Reader, *manifest.Node) error) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = stub
}

func (fake *FakeNodeContentProcessor) ProcessArgsForCall(i int) (context.Context, *bytes.Buffer, reactor.Reader, *manifest.Node) {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	argsForCall := fake.processArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeNodeContentProcessor) ProcessReturns(result1 error) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = nil
	fake.processReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeContentProcessor) ProcessReturnsOnCall(i int, result1 error) {
	fake.processMutex.Lock()
	defer fake.processMutex.Unlock()
	fake.ProcessStub = nil
	if fake.processReturnsOnCall == nil {
		fake.processReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.processReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeContentProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeContentProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reactor.NodeContentProcessor = new(FakeNodeContentProcessor)
