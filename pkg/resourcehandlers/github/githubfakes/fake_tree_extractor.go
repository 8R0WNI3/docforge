// SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package githubfakes

import (
	"context"
	"sync"

	"github.com/gardener/docforge/pkg/resourcehandlers/github"
)

type FakeTreeExtractor struct {
	ExtractTreeStub        func(context.Context, *github.ResourceLocator) ([]*github.ResourceLocator, error)
	extractTreeMutex       sync.RWMutex
	extractTreeArgsForCall []struct {
		arg1 context.Context
		arg2 *github.ResourceLocator
	}
	extractTreeReturns struct {
		result1 []*github.ResourceLocator
		result2 error
	}
	extractTreeReturnsOnCall map[int]struct {
		result1 []*github.ResourceLocator
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTreeExtractor) ExtractTree(arg1 context.Context, arg2 *github.ResourceLocator) ([]*github.ResourceLocator, error) {
	fake.extractTreeMutex.Lock()
	ret, specificReturn := fake.extractTreeReturnsOnCall[len(fake.extractTreeArgsForCall)]
	fake.extractTreeArgsForCall = append(fake.extractTreeArgsForCall, struct {
		arg1 context.Context
		arg2 *github.ResourceLocator
	}{arg1, arg2})
	stub := fake.ExtractTreeStub
	fakeReturns := fake.extractTreeReturns
	fake.recordInvocation("ExtractTree", []interface{}{arg1, arg2})
	fake.extractTreeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTreeExtractor) ExtractTreeCallCount() int {
	fake.extractTreeMutex.RLock()
	defer fake.extractTreeMutex.RUnlock()
	return len(fake.extractTreeArgsForCall)
}

func (fake *FakeTreeExtractor) ExtractTreeCalls(stub func(context.Context, *github.ResourceLocator) ([]*github.ResourceLocator, error)) {
	fake.extractTreeMutex.Lock()
	defer fake.extractTreeMutex.Unlock()
	fake.ExtractTreeStub = stub
}

func (fake *FakeTreeExtractor) ExtractTreeArgsForCall(i int) (context.Context, *github.ResourceLocator) {
	fake.extractTreeMutex.RLock()
	defer fake.extractTreeMutex.RUnlock()
	argsForCall := fake.extractTreeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTreeExtractor) ExtractTreeReturns(result1 []*github.ResourceLocator, result2 error) {
	fake.extractTreeMutex.Lock()
	defer fake.extractTreeMutex.Unlock()
	fake.ExtractTreeStub = nil
	fake.extractTreeReturns = struct {
		result1 []*github.ResourceLocator
		result2 error
	}{result1, result2}
}

func (fake *FakeTreeExtractor) ExtractTreeReturnsOnCall(i int, result1 []*github.ResourceLocator, result2 error) {
	fake.extractTreeMutex.Lock()
	defer fake.extractTreeMutex.Unlock()
	fake.ExtractTreeStub = nil
	if fake.extractTreeReturnsOnCall == nil {
		fake.extractTreeReturnsOnCall = make(map[int]struct {
			result1 []*github.ResourceLocator
			result2 error
		})
	}
	fake.extractTreeReturnsOnCall[i] = struct {
		result1 []*github.ResourceLocator
		result2 error
	}{result1, result2}
}

func (fake *FakeTreeExtractor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.extractTreeMutex.RLock()
	defer fake.extractTreeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTreeExtractor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.TreeExtractor = new(FakeTreeExtractor)
