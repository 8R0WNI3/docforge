// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package githubhttpcachefakes

import (
	"context"
	"sync"

	"github.com/gardener/docforge/pkg/readers/repositoryhosts/githubhttpcache"
	"github.com/google/go-github/v43/github"
)

type FakeGit struct {
	GetBlobRawStub        func(context.Context, string, string, string) ([]byte, *github.Response, error)
	getBlobRawMutex       sync.RWMutex
	getBlobRawArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getBlobRawReturns struct {
		result1 []byte
		result2 *github.Response
		result3 error
	}
	getBlobRawReturnsOnCall map[int]struct {
		result1 []byte
		result2 *github.Response
		result3 error
	}
	GetTreeStub        func(context.Context, string, string, string, bool) (*github.Tree, *github.Response, error)
	getTreeMutex       sync.RWMutex
	getTreeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 bool
	}
	getTreeReturns struct {
		result1 *github.Tree
		result2 *github.Response
		result3 error
	}
	getTreeReturnsOnCall map[int]struct {
		result1 *github.Tree
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGit) GetBlobRaw(arg1 context.Context, arg2 string, arg3 string, arg4 string) ([]byte, *github.Response, error) {
	fake.getBlobRawMutex.Lock()
	ret, specificReturn := fake.getBlobRawReturnsOnCall[len(fake.getBlobRawArgsForCall)]
	fake.getBlobRawArgsForCall = append(fake.getBlobRawArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetBlobRawStub
	fakeReturns := fake.getBlobRawReturns
	fake.recordInvocation("GetBlobRaw", []interface{}{arg1, arg2, arg3, arg4})
	fake.getBlobRawMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeGit) GetBlobRawCallCount() int {
	fake.getBlobRawMutex.RLock()
	defer fake.getBlobRawMutex.RUnlock()
	return len(fake.getBlobRawArgsForCall)
}

func (fake *FakeGit) GetBlobRawCalls(stub func(context.Context, string, string, string) ([]byte, *github.Response, error)) {
	fake.getBlobRawMutex.Lock()
	defer fake.getBlobRawMutex.Unlock()
	fake.GetBlobRawStub = stub
}

func (fake *FakeGit) GetBlobRawArgsForCall(i int) (context.Context, string, string, string) {
	fake.getBlobRawMutex.RLock()
	defer fake.getBlobRawMutex.RUnlock()
	argsForCall := fake.getBlobRawArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeGit) GetBlobRawReturns(result1 []byte, result2 *github.Response, result3 error) {
	fake.getBlobRawMutex.Lock()
	defer fake.getBlobRawMutex.Unlock()
	fake.GetBlobRawStub = nil
	fake.getBlobRawReturns = struct {
		result1 []byte
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) GetBlobRawReturnsOnCall(i int, result1 []byte, result2 *github.Response, result3 error) {
	fake.getBlobRawMutex.Lock()
	defer fake.getBlobRawMutex.Unlock()
	fake.GetBlobRawStub = nil
	if fake.getBlobRawReturnsOnCall == nil {
		fake.getBlobRawReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 *github.Response
			result3 error
		})
	}
	fake.getBlobRawReturnsOnCall[i] = struct {
		result1 []byte
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) GetTree(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 bool) (*github.Tree, *github.Response, error) {
	fake.getTreeMutex.Lock()
	ret, specificReturn := fake.getTreeReturnsOnCall[len(fake.getTreeArgsForCall)]
	fake.getTreeArgsForCall = append(fake.getTreeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 bool
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GetTreeStub
	fakeReturns := fake.getTreeReturns
	fake.recordInvocation("GetTree", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getTreeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeGit) GetTreeCallCount() int {
	fake.getTreeMutex.RLock()
	defer fake.getTreeMutex.RUnlock()
	return len(fake.getTreeArgsForCall)
}

func (fake *FakeGit) GetTreeCalls(stub func(context.Context, string, string, string, bool) (*github.Tree, *github.Response, error)) {
	fake.getTreeMutex.Lock()
	defer fake.getTreeMutex.Unlock()
	fake.GetTreeStub = stub
}

func (fake *FakeGit) GetTreeArgsForCall(i int) (context.Context, string, string, string, bool) {
	fake.getTreeMutex.RLock()
	defer fake.getTreeMutex.RUnlock()
	argsForCall := fake.getTreeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeGit) GetTreeReturns(result1 *github.Tree, result2 *github.Response, result3 error) {
	fake.getTreeMutex.Lock()
	defer fake.getTreeMutex.Unlock()
	fake.GetTreeStub = nil
	fake.getTreeReturns = struct {
		result1 *github.Tree
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) GetTreeReturnsOnCall(i int, result1 *github.Tree, result2 *github.Response, result3 error) {
	fake.getTreeMutex.Lock()
	defer fake.getTreeMutex.Unlock()
	fake.GetTreeStub = nil
	if fake.getTreeReturnsOnCall == nil {
		fake.getTreeReturnsOnCall = make(map[int]struct {
			result1 *github.Tree
			result2 *github.Response
			result3 error
		})
	}
	fake.getTreeReturnsOnCall[i] = struct {
		result1 *github.Tree
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGit) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBlobRawMutex.RLock()
	defer fake.getBlobRawMutex.RUnlock()
	fake.getTreeMutex.RLock()
	defer fake.getTreeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGit) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ githubhttpcache.Git = new(FakeGit)
