// SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by counterfeiter. DO NOT EDIT.
package repositoryhostsfakes

import (
	"sync"

	"github.com/gardener/docforge/pkg/readers/repositoryhosts"
)

type FakeRegistry struct {
	GetStub        func(string) repositoryhosts.RepositoryHost
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 repositoryhosts.RepositoryHost
	}
	getReturnsOnCall map[int]struct {
		result1 repositoryhosts.RepositoryHost
	}
	LoadStub        func(...repositoryhosts.RepositoryHost)
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
		arg1 []repositoryhosts.RepositoryHost
	}
	RemoveStub        func(...repositoryhosts.RepositoryHost)
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		arg1 []repositoryhosts.RepositoryHost
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRegistry) Get(arg1 string) repositoryhosts.RepositoryHost {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRegistry) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeRegistry) GetCalls(stub func(string) repositoryhosts.RepositoryHost) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeRegistry) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRegistry) GetReturns(result1 repositoryhosts.RepositoryHost) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 repositoryhosts.RepositoryHost
	}{result1}
}

func (fake *FakeRegistry) GetReturnsOnCall(i int, result1 repositoryhosts.RepositoryHost) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 repositoryhosts.RepositoryHost
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 repositoryhosts.RepositoryHost
	}{result1}
}

func (fake *FakeRegistry) Load(arg1 ...repositoryhosts.RepositoryHost) {
	fake.loadMutex.Lock()
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
		arg1 []repositoryhosts.RepositoryHost
	}{arg1})
	stub := fake.LoadStub
	fake.recordInvocation("Load", []interface{}{arg1})
	fake.loadMutex.Unlock()
	if stub != nil {
		fake.LoadStub(arg1...)
	}
}

func (fake *FakeRegistry) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *FakeRegistry) LoadCalls(stub func(...repositoryhosts.RepositoryHost)) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = stub
}

func (fake *FakeRegistry) LoadArgsForCall(i int) []repositoryhosts.RepositoryHost {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	argsForCall := fake.loadArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRegistry) Remove(arg1 ...repositoryhosts.RepositoryHost) {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		arg1 []repositoryhosts.RepositoryHost
	}{arg1})
	stub := fake.RemoveStub
	fake.recordInvocation("Remove", []interface{}{arg1})
	fake.removeMutex.Unlock()
	if stub != nil {
		fake.RemoveStub(arg1...)
	}
}

func (fake *FakeRegistry) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeRegistry) RemoveCalls(stub func(...repositoryhosts.RepositoryHost)) {
	fake.removeMutex.Lock()
	defer fake.removeMutex.Unlock()
	fake.RemoveStub = stub
}

func (fake *FakeRegistry) RemoveArgsForCall(i int) []repositoryhosts.RepositoryHost {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	argsForCall := fake.removeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRegistry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRegistry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositoryhosts.Registry = new(FakeRegistry)
